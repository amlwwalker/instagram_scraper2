// Generated by CoffeeScript 1.10.0
var InstagramComments, Readable, jsonRequest, request,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

jsonRequest = require('./util').jsonRequest;

Readable = require('readable-stream/readable');

request = require('request');


/**
 * Stream that scrapes as many comments as possible for a given user.
 * @param {String} options.username
 * @return {Stream} A stream of comment objects.
 */

InstagramComments = (function(superClass) {
  extend(InstagramComments, superClass);

  InstagramComments.prototype._csrfToken = void 0;

  InstagramComments.prototype._lock = false;

  InstagramComments.prototype._minId = void 0;

  InstagramComments.prototype._requests = 0;

  function InstagramComments(arg) {
    this.post = arg.post;
    this.destroy = bind(this.destroy, this);
    this._read = bind(this._read, this);
    this._getCommentsPage = bind(this._getCommentsPage, this);
    this.cookieJar = request.jar();
    InstagramComments.__super__.constructor.call(this, {
      highWaterMark: 16,
      objectMode: true
    });
    this._readableState.destroyed = false;
  }


  /**
   * Make a request for a Instagram page, parse the response, and get all the
     comments.
   * @param {String} username
   * @param {String} [startingId] The maximum comment id query for (the lowest
     one from the last request), or undefined if this is the first request.
   * @return {Stream} A stream of comments
   * @private
   */

  InstagramComments.prototype._getCommentsPage = function(minId) {
    var cookie, i, len, query, ref;
    this._requests += 1;
    if (this._csrfToken == null) {
      if (this._requests > 2) {
        this.emit('error', 'Didn\'t get a csrftoken from the first request');
        return;
      }
      ref = this.cookieJar.getCookies('https://www.instagram.com');
      for (i = 0, len = ref.length; i < len; i++) {
        cookie = ref[i];
        if (cookie.key === 'csrftoken') {
          this._csrfToken = cookie.value;
          break;
        }
      }
    }
    if (this._csrfToken == null) {
      return jsonRequest('media.comments.nodes.*', {
        uri: "https://www.instagram.com/p/" + this.post + "/?__a=1",
        jar: this.cookieJar
      });
    } else if (minId != null) {
      query = ("ig_shortcode(" + this.post + ") {\n  comments.before(" + minId + ", 20) {\n    nodes {\n      id,\n      created_at,\n      text,\n      user {\n        id,\n        profile_pic_url,\n        username\n      }\n    },\n    page_info\n  }\n}").replace(/\s/g, '');
      return jsonRequest('.nodes.*', {
        method: 'POST',
        url: 'https://www.instagram.com/query/',
        jar: this.cookieJar,
        form: {
          q: query,
          ref: 'media::show'
        },
        headers: {
          'X-CSRFToken': this._csrfToken,
          'Referer': 'https://www.instagram.com/'
        }
      });
    } else {
      return this.emit('error', 'Had csrfToken but no minId for post query.');
    }
  };

  InstagramComments.prototype._read = function() {
    var commentsReturned, hasMoreComments, lastComment;
    if (this._lock) {
      return;
    }
    this._lock = true;
    if (this._readableState.destroyed) {
      this.push(null);
      return;
    }
    commentsReturned = 0;
    hasMoreComments = false;
    lastComment = void 0;
    return this._getCommentsPage(this._minId).on('error', (function(_this) {
      return function(err) {
        return _this.emit('error', err);
      };
    })(this)).on('data', (function(_this) {
      return function(rawComment) {
        var comment;
        commentsReturned += 1;
        if (commentsReturned >= 20) {
          hasMoreComments = true;
        }
        comment = {
          id: rawComment.id,
          username: rawComment.user.username,
          time: rawComment['created_at'],
          text: rawComment.text
        };
        if (commentsReturned === 1) {
          _this._minId = rawComment.id;
        }
        if (lastComment != null) {
          _this.push(lastComment);
        }
        return lastComment = comment;
      };
    })(this)).on('end', (function(_this) {
      return function() {
        if (hasMoreComments) {
          _this._lock = false;
        }
        if (lastComment != null) {
          _this.push(lastComment);
        }
        if (!hasMoreComments) {
          return _this.push(null);
        }
      };
    })(this));
  };

  InstagramComments.prototype.destroy = function() {
    if (this._readableState.destroyed) {
      return;
    }
    this._readableState.destroyed = true;
    return this._destroy((function(_this) {
      return function(err) {
        if (err) {
          _this.emit('error', err);
        }
        return _this.emit('close');
      };
    })(this));
  };

  InstagramComments.prototype._destroy = function(cb) {
    return process.nextTick(cb);
  };

  return InstagramComments;

})(Readable);

module.exports = InstagramComments;
